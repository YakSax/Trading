
//@version=6
indicator('Strat Assistant v4', overlay = true, precision = 0)

///////////////////////////////////////////////
// START: user input
///////////////////////////////////////////////
// change the percentage of the wick for actionable indicators
hammer_shooter_threshold= input(title = 'Hammer & Shooter Threshold', defval = .65)

showTable = input.bool(true, title="Show FTFC Table")
atrLength = input.int(14, title="ATR Length")

// previous day lines switches and colors
_isPrevDayHighLineActive = input(title = 'Prev Day High Line Active?', defval = true)
_prevDayHighColor = input(title = 'Prev Day High Line Color', defval = color.lime)
_isPrevDayLowLineActive = input(title = 'Prev Day Low Line Active?', defval = true)
_prevDayLowColor = input(title = 'Prev Day High Line Color', defval = color.maroon)

_isPrevWeekHighLineActive = input(title = 'Prev Week High Lines Active?', defval = false)
_prevWeekHighColor = input(title = 'Prev Week High Line Color', defval = color.orange)
_isPrevWeekLowLineActive = input(title = 'Prev Week Low Lines Active?', defval = false)
_prevWeekLowColor = input(title = 'Prev Week Low Line Color', defval = color.purple)

// turn on and off ftc
_isFtcActive = input(title = 'Full Time Frame Continuity Active?', defval = true)

// turn on and off debug label
_isDebugLabelActive = input(title = 'Debug Label (Beta)', defval = false)

///////////////// END: user input //////////////////////////////////////




_bullColor = color.green
_bearColor = color.red
_outsideColor = color.fuchsia
_insideColor = color.new(#F6BE00, 0) // darker yellow so it shows up on white background
_bullShape = shape.arrowup
_bearShape = shape.arrowdown

_oneBarColor = _insideColor
_oneBarChar = '1'

_twoUpBarColor = _bullColor
_twoUpBarChar = '2'
_twoUpBarStyle = _bullShape

_twoDownBarColor = _bearColor
_twoDownBarChar = '2'
_twoDownBarStyle = _bearShape

_threeBarColor = _outsideColor
_threeBarChar = '3'

_barCharLocation = location.belowbar
_barShapeLocation = location.abovebar

_stratComboLocation = location.top
_stratComboStyle = shape.flag
_stratComboOffset = 3

_actionableOffset = 2
_actionalSignalShape = shape.flag
_actionalSignalLocation = location.bottom

// 0 index works right to left
_firstBarIndex = 0
_secondBarIndex = 1
_thirdBarIndex = 2
_fourthBarIndex = 3
_barIndexOffset = 1
BarIndex = 0

// for labels and text
_is22BearishReversal = '22 Bearish \nReversal'
_is22BullishReversal = '22 Bullish \nReversal'
_is212BearishReversal = '212 Bearish \nReversal'
_is212BullishReversal = '212 Bullish \nReversal'
_is322BearishReversal = '322 Bearish \nReversal'
_is322BullishReversal = '322 Bullish \nReversal'
_is32BearishReversal = '32 Bearish \nReversal'
_is32BullishReversal = '32 Bullish \nReversal'
_is312BearishReversal = '312 Bearish \nReversal'
_is312BullishReversal = '312 Bullish \nReversal'
_is122BearishRevStratReversal = '122 Bearish RevStrat \nReversal'
_is122BullishRevStratReversal = '122 Bullish RevStrat \nReversal'
_is2222BearishRandyJackson = '2222 Bearish \nRandyJackson'
_is2222BullishRandyJackson = '2222 Bullish \nRandyJackson'

_isFailed2 = 'Failed 2'
_isFailed2Shooter = 'Failed 2 Shooter'
_isFailed2Hammer = 'Failed 2 Hammer'
_isInsideHammer = 'Inside Hammer'
_isInsideShooter = 'Inside Shooter'
_isNirvana = 'Nirvana'
_isSalvana = 'Salvana'
_isHolyGrail = 'Holy Grail'
_isHolySal = 'Holy Sal'
_isBigMeech = 'Big Meech'
_is311 = '3-1-1'
_isDoubleInside = 'Double Inside'


// FULL TIME FRAME CONTINUITY variables
_ftcLocation = location.absolute

_oneMinuteTimeFrame = '1'
_threeMinuteTimeFrame = '3'
_fiveMinuteTimeFrame = '5'
_tenMinuteTimeFrame = '10'
_fifteenMinuteTimeFrame = '15'
_thirtyMinuteTimeFrame = '30'
_fourtyFiveMinuteTimeFrame = '45'
_hourTimeFrame = '60'
_twoHourTimeFrame = '120'
_threeHourTimeFrame = '180'
_fourHourTimeFrame = '240'
_dayTimeFrame = 'D'
_weekTimeFrame = 'W'
_monthTimeFrame = 'M'
_quarterTimeFrame = '3M'

_ftcBaseOffset = 1
_ftc15Offset = _ftcBaseOffset + 1
_ftc30Offset = _ftcBaseOffset + 2
_ftcHourOffset = _ftcBaseOffset + 3
_ftcFourHourOffset = _ftcBaseOffset + 4
_ftcDayOffset = _ftcBaseOffset + 5
_ftcWeekOffset = _ftcBaseOffset + 6
_ftcMonthOffset = _ftcBaseOffset + 7
_ftcQuarterOffset = _ftcBaseOffset + 8

_ftc15Text = '15'
_ftc30Text = '30'
_ftcHourText = 'H'
_ftcFourHourText = '4H'
_ftcDayText = 'D'
_ftcWeekText = 'W'
_ftcMonthText = 'M'
_ftcQuarterText = 'Q'
_ftcInsideText = 'IN\n' // wanted this as input, but pine script doesn't like it
_ftcOutsideText = 'O\n' // wanted this as input, but pine script doesn't like it
/////////  END: static variables / constants    ///////////////

///////////////////////////////////////////////
// START: Functions & Logic
///////////////////////////////////////////////

// reusable bar identifier functions for current time frame
getOneBar(rightBar, leftBar) =>
    high[rightBar] <= high[leftBar] and low[rightBar] >= low[leftBar]

getTwoUpBar(rightBar, leftBar) =>
    high[rightBar] > high[leftBar] and not(low[rightBar] < low[leftBar])

getTwoDownBar(rightBar, leftBar) =>
    low[rightBar] < low[leftBar] and not(high[rightBar] > high[leftBar])

getThreeBar(rightBar, leftBar) =>
    high[rightBar] > high[leftBar] and low[rightBar] < low[leftBar]

// bar color function
getBarColor() =>
    getOneBar_1 = getOneBar(0, 1)
    getThreeBar_1 = getThreeBar(0, 1)
    getTwoUpBar_1 = getTwoUpBar(0, 1)
    getTwoDownBar_1 = getTwoDownBar(0, 1)
    iff_1 = getTwoDownBar_1 ? _twoDownBarColor : na
    iff_2 = getTwoUpBar_1 ? _twoUpBarColor : iff_1
    iff_3 = getThreeBar_1 ? _threeBarColor : iff_2
    getOneBar_1 ? _oneBarColor : iff_3

// reusable functions for each bar index
getIndexOneBar(barIndex) =>
    getOneBar(barIndex, barIndex + _barIndexOffset)
getIndexTwoUpBar(barIndex) =>
    getTwoUpBar(barIndex, barIndex + _barIndexOffset)
getIndexTwoDownBar(barIndex) =>
    getTwoDownBar(barIndex, barIndex + _barIndexOffset)
getIndexThreeBar(barIndex) =>
    getThreeBar(barIndex, barIndex + _barIndexOffset)

// Failed 2 logic: candle breaks previous high/low but closes back inside
// getFailedTwoBar(barIndex) =>
//     (getTwoUpBar(barIndex, barIndex + 1) and close[barIndex] <= high[barIndex + 1]) or (getTwoDownBar(barIndex, barIndex + 1) and close[barIndex] >= low[barIndex + 1])

breach_tolerance = 0.001  // 0.1%
getFailedTwoBar(barIndex) =>
    (getTwoUpBar(barIndex, barIndex + 1) and close[barIndex] <= high[barIndex + 1] * (1 + breach_tolerance)) or (getTwoDownBar(barIndex, barIndex + 1) and close[barIndex] >= low[barIndex + 1] * (1 - breach_tolerance))

isFailed2 = getFailedTwoBar(0)



// STRATEGY CODE: displays at the top, strategies/combos... these generally work left to right - the far right bar is index 0, add one to go back each time
is22BearishReversal = getIndexTwoUpBar(_secondBarIndex) and getIndexTwoDownBar(_firstBarIndex) and not getIndexOneBar(_thirdBarIndex) and not getIndexTwoDownBar(_thirdBarIndex) and not getIndexTwoDownBar(3) and not getIndexThreeBar(_thirdBarIndex)
is22BullishReversal = getIndexTwoDownBar(_secondBarIndex) and getIndexTwoUpBar(_firstBarIndex) and not getIndexOneBar(_thirdBarIndex) and not getIndexTwoUpBar(_thirdBarIndex) and not getIndexTwoUpBar(3) and not getIndexThreeBar(_thirdBarIndex)
is212BearishReversal = getIndexTwoUpBar(_thirdBarIndex) and getIndexOneBar(_secondBarIndex) and getIndexTwoDownBar(_firstBarIndex)
is212BullishReversal = getIndexTwoDownBar(_thirdBarIndex) and getIndexOneBar(_secondBarIndex) and getIndexTwoUpBar(_firstBarIndex)
is322BearishReversal = getIndexThreeBar(_thirdBarIndex) and getIndexTwoUpBar(_secondBarIndex) and getIndexTwoDownBar(_firstBarIndex)
is322BullishReversal = getIndexThreeBar(_thirdBarIndex) and getIndexTwoDownBar(_secondBarIndex) and getIndexTwoUpBar(_firstBarIndex)
is32BearishReversal = getIndexThreeBar(_secondBarIndex) and getIndexTwoDownBar(_firstBarIndex)
is32BullishReversal = getIndexThreeBar(_secondBarIndex) and getIndexTwoUpBar(_firstBarIndex)
is312BearishReversal = getIndexThreeBar(_thirdBarIndex) and getIndexOneBar(_secondBarIndex) and getIndexTwoDownBar(_firstBarIndex)
is312BullishReversal = getIndexThreeBar(_thirdBarIndex) and getIndexOneBar(_secondBarIndex) and getIndexTwoUpBar(_firstBarIndex)
is122BearishRevStratReversal = getIndexOneBar(_thirdBarIndex) and getIndexTwoUpBar(_secondBarIndex) and getIndexTwoDownBar(_firstBarIndex)
is122BullishRevStratReversal = getIndexOneBar(_thirdBarIndex) and getIndexTwoDownBar(_secondBarIndex) and getIndexTwoUpBar(_firstBarIndex)
is2222BearishRandyJackson = getIndexTwoDownBar(_fourthBarIndex) and getIndexTwoDownBar(_thirdBarIndex) and getIndexTwoUpBar(_secondBarIndex) and getIndexTwoDownBar(_firstBarIndex)
is2222BullishRandyJackson = getIndexTwoUpBar(_fourthBarIndex) and getIndexTwoUpBar(_thirdBarIndex) and getIndexTwoDownBar(_secondBarIndex) and getIndexTwoUpBar(_firstBarIndex)
isNirvana = getIndexOneBar(_secondBarIndex) and getIndexThreeBar(_firstBarIndex)
isHolyGrail = getIndexThreeBar(_secondBarIndex) and getIndexOneBar(_firstBarIndex)
isDoubleInside = getIndexOneBar(_secondBarIndex) and getIndexOneBar(_firstBarIndex)

isInsideBar = getIndexOneBar(_firstBarIndex)


// Hammer: open and close are in top 35% of range
candle_range = high - low
hammerThreshold = low + candle_range * hammer_shooter_threshold
isHammer = open > hammerThreshold and close > hammerThreshold

// Shooter: open and close are in bottom 35% of range
shooterThreshold = high - candle_range * hammer_shooter_threshold
isShooter = open < shooterThreshold and close < shooterThreshold

// ADDITIONAL PATTERN LOGIC
isFailed2Shooter = isFailed2 and isShooter
isFailed2Hammer = isFailed2 and isHammer
isInsideHammer = isHammer and getIndexOneBar(_firstBarIndex)
isInsideShooter = isShooter and getIndexOneBar(_firstBarIndex)

// isSalvana = isNirvana and isFailed2
// isHolySal = getIndexOneBar(_secondBarIndex) and getIndexThreeBar(_firstBarIndex) and isFailed2
isBigMeech = getIndexThreeBar(_firstBarIndex) and getIndexOneBar(_secondBarIndex) and getIndexThreeBar(_firstBarIndex)
is311 = getIndexThreeBar(_thirdBarIndex) and getIndexOneBar(_secondBarIndex) and getIndexOneBar(_firstBarIndex)


// ============================================================================================================================================
// FULL TIME FRAME CONTINUITY CODE: 
//reusable function for getting detail on the security
getSecurityByTimeFrame(timeFrame) =>
    [openValue, closeValue, highValue, lowValue, timeValue] = request.security(syminfo.tickerid, timeFrame, [open, close, high, low, time])
    [openValue, closeValue, highValue, lowValue, timeValue]

// reusable bar identifier functions for series
getOneBarBySeries(highSeries, lowSeries) =>
    highSeries[0] <= highSeries[1] and lowSeries[0] >= lowSeries[1]

getThreeBarBySeries(highSeries, lowSeries) =>
    highSeries[0] > highSeries[1] and lowSeries[0] < lowSeries[1]


// get open, close, high, and low series for various time frames
[open15Value, close15Value, high15Value, low15Value, time15Value] = getSecurityByTimeFrame(_fifteenMinuteTimeFrame)
[open30Value, close30Value, high30Value, low30Value, time30Value] = getSecurityByTimeFrame(_thirtyMinuteTimeFrame)
[open60Value, close60Value, highHourValue, lowHourValue, timeHourValue] = getSecurityByTimeFrame(_hourTimeFrame)
[openFourHourValue, closeFourHourValue, highFourHourValue, lowFourHourValue, timeFourHourValue] = getSecurityByTimeFrame(_fourHourTimeFrame)
[openDayValue, closeDayValue, highDayValue, lowDayValue, timeDayValue] = getSecurityByTimeFrame(_dayTimeFrame)
[openWeekValue, closeWeekValue, highWeekValue, lowWeekValue, timeWeekValue] = getSecurityByTimeFrame(_weekTimeFrame)
[openMonthValue, closeMonthValue, highMonthValue, lowMonthValue, timeMonthValue] = getSecurityByTimeFrame(_monthTimeFrame)
[openQuarterValue, closeQuarterValue, highQuarterValue, lowQuarterValue, timeQuarterValue] = getSecurityByTimeFrame(_quarterTimeFrame)

// determine if the time frame is green (or red if not green)
is15FtcGreen = open15Value[0] <= close15Value[0]
is30FtcGreen = open30Value[0] <= close30Value[0]
isHourFtcGreen = open60Value[0] <= close60Value[0]
isFourHourFtcGreen = openFourHourValue[0] <= closeFourHourValue[0]
isDayFtcGreen = openDayValue[0] <= closeDayValue[0]
isWeekFtcGreen = openWeekValue[0] <= closeWeekValue[0]
isMonthFtcGreen = openMonthValue[0] <= closeMonthValue[0]
isQuarterFtcGreen = openQuarterValue[0] <= closeQuarterValue[0]

// determine if the time frame is inside
is15FtcInside = getOneBarBySeries(high15Value, low15Value)
is30FtcInside = getOneBarBySeries(high30Value, low30Value)
isHourFtcInside = getOneBarBySeries(highHourValue, lowHourValue)
isFourHourFtcInside = getOneBarBySeries(highFourHourValue, lowFourHourValue)
isDayFtcInside = getOneBarBySeries(highDayValue, lowDayValue)
isWeekFtcInside = getOneBarBySeries(highWeekValue, lowWeekValue)
isMonthFtcInside = getOneBarBySeries(highMonthValue, lowMonthValue)
isQuarterFtcInside = getOneBarBySeries(highQuarterValue, lowQuarterValue)

// determine if the time frame is outside
is15FtcOutside = getThreeBarBySeries(high15Value, low15Value)
is30FtcOutside = getThreeBarBySeries(high30Value, low30Value)
isHourFtcOutside = getThreeBarBySeries(highHourValue, lowHourValue)
isFourHourFtcOutside = getThreeBarBySeries(highFourHourValue, lowFourHourValue)
isDayFtcOutside = getThreeBarBySeries(highDayValue, lowDayValue)
isWeekFtcOutside = getThreeBarBySeries(highWeekValue, lowWeekValue)
isMonthFtcOutside = getThreeBarBySeries(highMonthValue, lowMonthValue)
isQuarterFtcOutside = getThreeBarBySeries(highQuarterValue, lowQuarterValue)

// do not show timeframes that are less than the time frame selected (it will be inaccurate)
is15ValidTimeFrame = timeframe.period == _oneMinuteTimeFrame or timeframe.period == _threeMinuteTimeFrame or timeframe.period == _fiveMinuteTimeFrame or timeframe.period == _tenMinuteTimeFrame or timeframe.period == _fifteenMinuteTimeFrame
is30ValidTimeFrame = is15ValidTimeFrame or timeframe.period == _thirtyMinuteTimeFrame
isHourValidTimeFrame = is30ValidTimeFrame or timeframe.period == _hourTimeFrame or timeframe.period == _fourtyFiveMinuteTimeFrame
isFourHourValidTimeFrame = isHourValidTimeFrame or timeframe.isintraday
isDayValidTimeFrame = isFourHourValidTimeFrame or timeframe.isdaily
isWeekValidTimeFrame = isDayValidTimeFrame or timeframe.period == _weekTimeFrame or timeframe.isintraday
isMonthValidTimeFrame = isWeekValidTimeFrame or timeframe.ismonthly
isQuarterValidTimeFrame = isWeekValidTimeFrame or timeframe.isdwm

// offset for time frame so it doesn't go too far right
int ftcTimeFrameOffset = 0
if not isQuarterValidTimeFrame
    ftcTimeFrameOffset := 8
    ftcTimeFrameOffset
else if not isMonthValidTimeFrame
    ftcTimeFrameOffset := 7
    ftcTimeFrameOffset
else if not isWeekValidTimeFrame
    ftcTimeFrameOffset := 6
    ftcTimeFrameOffset
else if not isDayValidTimeFrame
    ftcTimeFrameOffset := 5
    ftcTimeFrameOffset
else if not isFourHourValidTimeFrame
    ftcTimeFrameOffset := 4
    ftcTimeFrameOffset
else if not isHourValidTimeFrame
    ftcTimeFrameOffset := 3
    ftcTimeFrameOffset
else if not is30ValidTimeFrame
    ftcTimeFrameOffset := 2
    ftcTimeFrameOffset
else if not is15ValidTimeFrame
    ftcTimeFrameOffset := 1
    ftcTimeFrameOffset

// ensure the timeframe as well as the history are both valid (if a stock is IPO, won't have a months of history)
// getting rid of all history checks... current state will exist
is15Valid = is15ValidTimeFrame
is30Valid = is30ValidTimeFrame
isHourValid = isHourValidTimeFrame
isFourHourValid = isFourHourValidTimeFrame
isDayValid = isDayValidTimeFrame
isWeekValid = isWeekValidTimeFrame
isMonthValid = isMonthValidTimeFrame
isQuarterValid = isQuarterValidTimeFrame

// bulk logic for Ftc to display the various shapes, colors, and indicators
is15FtcGreenPlot = _isFtcActive and is15Valid and is15FtcGreen
is15FtcRedPlot = _isFtcActive and is15Valid and not is15FtcGreen
is15FtcInsidePlot = _isFtcActive and is15Valid and is15FtcInside
is15FtcOutsidePlot = _isFtcActive and is15Valid and is15FtcOutside

is30FtcGreenPlot = is30Valid and is30FtcGreen
is30FtcRedPlot = is30Valid and not is30FtcGreen
is30FtcInsidePlot = _isFtcActive and is30Valid and is30FtcInside
is30FtcOutsidePlot = _isFtcActive and is30Valid and is30FtcOutside

isHourFtcGreenPlot = isHourValid and isHourFtcGreen
isHourFtcRedPlot = isHourValid and not isHourFtcGreen
isHourFtcInsidePlot = _isFtcActive and isHourValid and isHourFtcInside
isHourFtcOutsidePlot = _isFtcActive and isHourValid and isHourFtcOutside

isFourHourFtcGreenPlot = isFourHourValid and isFourHourFtcGreen
isFourHourFtcRedPlot = isFourHourValid and not isFourHourFtcGreen
isFourHourFtcInsidePlot = _isFtcActive and isFourHourValid and isFourHourFtcInside
isFourHourFtcOutsidePlot = _isFtcActive and isFourHourValid and isFourHourFtcOutside

isDayFtcGreenPlot = isDayValid and isDayFtcGreen
isDayFtcRedPlot = isDayValid and not isDayFtcGreen
isDayFtcInsidePlot = _isFtcActive and isDayValid and isDayFtcInside
isDayFtcOutsidePlot = _isFtcActive and isDayValid and isDayFtcOutside

isWeekFtcGreenPlot = isWeekValid and isWeekFtcGreen
isWeekFtcRedPlot = isWeekValid and not isWeekFtcGreen
isWeekFtcInsidePlot = _isFtcActive and isWeekValid and isWeekFtcInside
isWeekFtcOutsidePlot = _isFtcActive and isWeekValid and isWeekFtcOutside

isMonthFtcGreenPlot = isMonthValid and isMonthFtcGreen
isMonthFtcRedPlot = isMonthValid and not isMonthFtcGreen
isMonthFtcInsidePlot = _isFtcActive and isMonthValid and isMonthFtcInside
isMonthFtcOutsidePlot = _isFtcActive and isMonthValid and isMonthFtcOutside

isQuarterFtcGreenPlot = isQuarterValid and isQuarterFtcGreen
isQuarterFtcRedPlot = isQuarterValid and not isQuarterFtcGreen
isQuarterFtcInsidePlot = _isFtcActive and isQuarterValid and isQuarterFtcInside
isQuarterFtcOutsidePlot = _isFtcActive and isQuarterValid and isQuarterFtcOutside

/////////////// END: FTFC Functions & Logic  /////////////////////////////////////

// identify 1 candles with identifier below
plotchar(getOneBar(0, 1), title = 'One Bar', char = _oneBarChar, location = _barCharLocation, color = _oneBarColor)

// identify 2 up candle with identifier below and indicator above
plotshape(getTwoUpBar(0, 1), style = _twoUpBarStyle, title = 'Two Up Bar Shape', location = _barShapeLocation, color = _twoUpBarColor)
plotchar(getTwoUpBar(0, 1), title = 'Two Up Bar', char = _twoUpBarChar, location = _barCharLocation, color = _twoUpBarColor)

// identify 2 down candle with identifier below and indicator above
plotshape(getTwoDownBar(0, 1), style = _twoDownBarStyle, title = 'Two Bar Shape', location = _barShapeLocation, color = _twoDownBarColor)
plotchar(getTwoDownBar(0, 1), title = 'Two Down Bar', char = _twoDownBarChar, location = _barCharLocation, color = _twoDownBarColor)

// identify 3 candle with indentifier below
plotchar(getThreeBar(0, 1), title = 'Three Bar', char = _threeBarChar, location = _barCharLocation, color = _threeBarColor)

// change bar color    
barcolor(getBarColor())

// ========= PLOT FULL TIME FRAME CONTINUITY ===========
plotchar(is15FtcInsidePlot ? close : na, title = 'isFtc15Inside', char = '', text = _ftcInsideText, location = _ftcLocation, offset = _ftc15Offset - ftcTimeFrameOffset, color = _insideColor, show_last = 1)
plotchar(is15FtcOutsidePlot ? close : na, title = 'isFtc15Outside', char = '', text = _ftcOutsideText, location = _ftcLocation, offset = _ftc15Offset - ftcTimeFrameOffset, color = color.new(_outsideColor, 0), show_last = 1)
plotshape(is15FtcGreenPlot ? close : na, title = 'isFtc15Green', style = _bullShape, text = _ftc15Text, location = _ftcLocation, offset = _ftc15Offset - ftcTimeFrameOffset, color = color.new(_bullColor, 0), show_last = 1)
plotshape(is15FtcRedPlot ? close : na, title = 'isFtc15Red', style = _bearShape, text = _ftc15Text, location = _ftcLocation, offset = _ftc15Offset - ftcTimeFrameOffset, color = color.new(_bearColor, 0), show_last = 1)

plotchar(is30FtcInsidePlot ? close : na, title = 'isFtc30Inside', char = '', text = _ftcInsideText, location = _ftcLocation, offset = _ftc30Offset - ftcTimeFrameOffset, color = _insideColor, show_last = 1)
plotchar(is30FtcOutsidePlot ? close : na, title = 'isFtc30Outside', char = '', text = _ftcOutsideText, location = _ftcLocation, offset = _ftc30Offset - ftcTimeFrameOffset, color = color.new(_outsideColor, 0), show_last = 1)
plotshape(is30FtcGreenPlot ? close : na, title = 'isFtc30Green', style = _bullShape, text = _ftc30Text, location = _ftcLocation, offset = _ftc30Offset - ftcTimeFrameOffset, color = color.new(_bullColor, 0), show_last = 1)
plotshape(is30FtcRedPlot ? close : na, title = 'isFtc30Red', style = _bearShape, text = _ftc30Text, location = _ftcLocation, offset = _ftc30Offset - ftcTimeFrameOffset, color = color.new(_bearColor, 0), show_last = 1)

plotchar(isHourFtcInsidePlot ? close : na, title = 'isFtcHourInside', char = '', text = _ftcInsideText, location = _ftcLocation, offset = _ftcHourOffset - ftcTimeFrameOffset, color = _insideColor, show_last = 1)
plotchar(isHourFtcOutsidePlot ? close : na, title = 'isFtcHourOutside', char = '', text = _ftcOutsideText, location = _ftcLocation, offset = _ftcHourOffset - ftcTimeFrameOffset, color = color.new(_outsideColor, 0), show_last = 1)
plotshape(isHourFtcGreenPlot ? close : na, title = 'isFtcHourGreen', style = _bullShape, text = _ftcHourText, location = _ftcLocation, offset = _ftcHourOffset - ftcTimeFrameOffset, color = color.new(_bullColor, 0), show_last = 1)
plotshape(isHourFtcRedPlot ? close : na, title = 'isFtcHourRed', style = _bearShape, text = _ftcHourText, location = _ftcLocation, offset = _ftcHourOffset - ftcTimeFrameOffset, color = color.new(_bearColor, 0), show_last = 1)

plotchar(isFourHourFtcInsidePlot ? close : na, title = 'isFtcFourHourInside', char = '', text = _ftcInsideText, location = _ftcLocation, offset = _ftcFourHourOffset - ftcTimeFrameOffset, color = _insideColor, show_last = 1)
plotchar(isFourHourFtcOutsidePlot ? close : na, title = 'isFtcFourHourOutside', char = '', text = _ftcOutsideText, location = _ftcLocation, offset = _ftcFourHourOffset - ftcTimeFrameOffset, color = color.new(_outsideColor, 0), show_last = 1)
plotshape(isFourHourFtcGreenPlot ? close : na, title = 'isFtcFourHourGreen', style = _bullShape, text = _ftcFourHourText, location = _ftcLocation, offset = _ftcFourHourOffset - ftcTimeFrameOffset, color = color.new(_bullColor, 0), show_last = 1)
plotshape(isFourHourFtcRedPlot ? close : na, title = 'isFtcFourHourRed', style = _bearShape, text = _ftcFourHourText, location = _ftcLocation, offset = _ftcFourHourOffset - ftcTimeFrameOffset, color = color.new(_bearColor, 0), show_last = 1)

plotchar(isDayFtcInsidePlot ? close : na, title = 'isFtcDayInside', char = '', text = _ftcInsideText, location = _ftcLocation, offset = _ftcDayOffset - ftcTimeFrameOffset, color = _insideColor, show_last = 1)
plotchar(isDayFtcOutsidePlot ? close : na, title = 'isFtcDayOutside', char = '', text = _ftcOutsideText, location = _ftcLocation, offset = _ftcDayOffset - ftcTimeFrameOffset, color = color.new(_outsideColor, 0), show_last = 1)
plotshape(isDayFtcGreenPlot ? close : na, title = 'isFtcDayGreen', style = _bullShape, text = _ftcDayText, location = _ftcLocation, offset = _ftcDayOffset - ftcTimeFrameOffset, color = color.new(_bullColor, 0), show_last = 1)
plotshape(isDayFtcRedPlot ? close : na, title = 'isFtcDayRed', style = _bearShape, text = _ftcDayText, location = _ftcLocation, offset = _ftcDayOffset - ftcTimeFrameOffset, color = color.new(_bearColor, 0), show_last = 1)

plotchar(isWeekFtcInsidePlot ? close : na, title = 'isFtcWeekInside', char = '', text = _ftcInsideText, location = _ftcLocation, offset = _ftcWeekOffset - ftcTimeFrameOffset, color = _insideColor, show_last = 1)
plotchar(isWeekFtcOutsidePlot ? close : na, title = 'isFtcWeekOutside', char = '', text = _ftcOutsideText, location = _ftcLocation, offset = _ftcWeekOffset - ftcTimeFrameOffset, color = color.new(_outsideColor, 0), show_last = 1)
plotshape(isWeekFtcGreenPlot ? close : na, title = 'isFtcWeekGreen', style = _bullShape, text = _ftcWeekText, location = _ftcLocation, offset = _ftcWeekOffset - ftcTimeFrameOffset, color = color.new(_bullColor, 0), show_last = 1)
plotshape(isWeekFtcRedPlot ? close : na, title = 'isFtcWeekRed', style = _bearShape, text = _ftcWeekText, location = _ftcLocation, offset = _ftcWeekOffset - ftcTimeFrameOffset, color = color.new(_bearColor, 0), show_last = 1)

plotchar(isMonthFtcInsidePlot ? close : na, title = 'isFtcMonthInside', char = '', text = _ftcInsideText, location = _ftcLocation, offset = _ftcMonthOffset - ftcTimeFrameOffset, color = _insideColor, show_last = 1)
plotchar(isMonthFtcOutsidePlot ? close : na, title = 'isFtcMonthOutside', char = '', text = _ftcOutsideText, location = _ftcLocation, offset = _ftcMonthOffset - ftcTimeFrameOffset, color = color.new(_outsideColor, 0), show_last = 1)
plotshape(isMonthFtcGreenPlot ? close : na, title = 'isFtcMonthGreen', style = _bullShape, text = _ftcMonthText, location = _ftcLocation, offset = _ftcMonthOffset - ftcTimeFrameOffset, color = color.new(_bullColor, 0), show_last = 1)
plotshape(isMonthFtcRedPlot ? close : na, title = 'isFtcMonthRed', style = _bearShape, text = _ftcMonthText, location = _ftcLocation, offset = _ftcMonthOffset - ftcTimeFrameOffset, color = color.new(_bearColor, 0), show_last = 1)

plotchar(isQuarterFtcInsidePlot ? close : na, title = 'isFtcQuarterInside', char = '', text = _ftcInsideText, location = _ftcLocation, offset = _ftcQuarterOffset - ftcTimeFrameOffset, color = _insideColor, show_last = 1)
plotchar(isQuarterFtcOutsidePlot ? close : na, title = 'isFtcQuarterOutside', char = '', text = _ftcOutsideText, location = _ftcLocation, offset = _ftcQuarterOffset - ftcTimeFrameOffset, color = color.new(_outsideColor, 0), show_last = 1)
plotshape(isQuarterFtcGreenPlot ? close : na, title = 'isFtcQuarterGreen', style = _bullShape, text = _ftcQuarterText, location = _ftcLocation, offset = _ftcQuarterOffset - ftcTimeFrameOffset, color = color.new(_bullColor, 0), show_last = 1)
plotshape(isQuarterFtcRedPlot ? close : na, title = 'isFtcQuarterRed', style = _bearShape, text = _ftcQuarterText, location = _ftcLocation, offset = _ftcQuarterOffset - ftcTimeFrameOffset, color = color.new(_bearColor, 0), show_last = 1)


// ========= PLOT ACTIONABLE SIGNALS ===========
// plotshape(isFailed2 and not isFailed2Hammer and not isInsideShooter and not isShooter and not isHammer and not isInsideBar ? true : false, title = 'isFailed2 label', style = _actionalSignalShape, color = _insideColor, location = _actionalSignalLocation, text = 'Failed 2', textcolor = _insideColor, offset = _actionableOffset, show_last=2)
// plotshape(isFailed2, title = 'isFailed2 Label', style = _actionalSignalShape, color = _insideColor, location = _actionalSignalLocation, text = 'Failed 2', textcolor = _insideColor, offset = _actionableOffset, show_last = 1)
plotshape(isShooter and not isInsideShooter and not isFailed2Shooter ? true : false, title = 'isShooter Label', style = _actionalSignalShape, color = color.new(_bearColor, 0), location = _actionalSignalLocation, text = 'Shooter', textcolor = color.new(_bearColor, 0), offset = _actionableOffset, show_last = 1)
plotshape(isHammer and not isInsideHammer and not isFailed2Hammer ? true : false, title = 'isHammer Label', style = _actionalSignalShape, color = color.new(_bullColor, 0), location = _actionalSignalLocation, text = 'Hammer', textcolor = color.new(_bullColor, 0), offset = _actionableOffset, show_last = 1)
plotshape(isInsideBar and not isInsideShooter and not isFailed2Shooter and not isInsideHammer and not isFailed2Hammer ? true : false, title = 'isInsideBar Label', style = _actionalSignalShape, color = _insideColor, location = _actionalSignalLocation, text = 'Inside Bar', textcolor = _insideColor, offset = _actionableOffset, show_last = 1)

plotshape(isInsideHammer , title = 'isInsideHammer Label', style = _actionalSignalShape, color = color.new(_bullColor, 0), location = _actionalSignalLocation, text = 'Inside Hammer', textcolor = color.new(_bullColor, 0), offset = _actionableOffset, show_last = 1)
plotshape(isInsideShooter, title = 'isInsideShooter Label', style = _actionalSignalShape, color = color.new(_bearColor, 0), location = _actionalSignalLocation, text = 'Inside Shooter', textcolor = color.new(_bearColor, 0), offset = _actionableOffset, show_last = 1)
plotshape(isFailed2Hammer, title = 'isFailed2Hammer Label', style = _actionalSignalShape, color = color.new(_bullColor, 0), location = _actionalSignalLocation, text = 'Failed 2 Hammer', textcolor = color.new(_bullColor, 0), offset = _actionableOffset, show_last = 1)
plotshape(isFailed2Shooter, title = 'isFailed2Shooter Label', style = _actionalSignalShape, color = color.new(_bearColor, 0), location = _actionalSignalLocation, text = 'Failed 2 Shooter', textcolor = color.new(_bearColor, 0), offset = _actionableOffset, show_last = 1)

// STRAT COMBOS
plotshape(is22BearishReversal, title = _is22BearishReversal, style = _stratComboStyle, color = color.new(_bearColor, 0), location = _stratComboLocation, text = _is22BearishReversal, textcolor = color.new(_bearColor, 0), offset = _stratComboOffset, show_last = 1)
plotshape(is22BullishReversal, title = _is22BullishReversal, style = _stratComboStyle, color = color.new(_bullColor, 0), location = _stratComboLocation, text = _is22BullishReversal, textcolor = color.new(_bullColor, 0), offset = _stratComboOffset, show_last = 1)
plotshape(is212BearishReversal, title = _is212BearishReversal, style = _stratComboStyle, color = color.new(_bearColor, 0), location = _stratComboLocation, text = _is212BearishReversal, textcolor = color.new(_bearColor, 0), offset = _stratComboOffset, show_last = 1)
plotshape(is212BullishReversal, title = _is212BullishReversal, style = _stratComboStyle, color = color.new(_bullColor, 0), location = _stratComboLocation, text = _is212BullishReversal, textcolor = color.new(_bullColor, 0), offset = _stratComboOffset, show_last = 1)
plotshape(is322BearishReversal, title = _is322BearishReversal, style = _stratComboStyle, color = color.new(_bearColor, 0), location = _stratComboLocation, text = _is322BearishReversal, textcolor = color.new(_bearColor, 0), offset = _stratComboOffset, show_last = 1)
plotshape(is322BullishReversal, title = _is322BullishReversal, style = _stratComboStyle, color = color.new(_bullColor, 0), location = _stratComboLocation, text = _is322BullishReversal, textcolor = color.new(_bullColor, 0), offset = _stratComboOffset, show_last = 1)
plotshape(is32BearishReversal, title = _is32BearishReversal, style = _stratComboStyle, color = color.new(_bearColor, 0), location = _stratComboLocation, text = _is32BearishReversal, textcolor = color.new(_bearColor, 0), offset = _stratComboOffset, show_last = 1)
plotshape(is32BullishReversal, title = _is32BullishReversal, style = _stratComboStyle, color = color.new(_bullColor, 0), location = _stratComboLocation, text = _is32BullishReversal, textcolor = color.new(_bullColor, 0), offset = _stratComboOffset, show_last = 1)
plotshape(is312BearishReversal, title = _is312BearishReversal, style = _stratComboStyle, color = color.new(_bearColor, 0), location = _stratComboLocation, text = _is312BearishReversal, textcolor = color.new(_bearColor, 0), offset = _stratComboOffset, show_last = 1)
plotshape(is312BullishReversal, title = _is312BullishReversal, style = _stratComboStyle, color = color.new(_bullColor, 0), location = _stratComboLocation, text = _is312BullishReversal, textcolor = color.new(_bullColor, 0), offset = _stratComboOffset, show_last = 1)
plotshape(is122BearishRevStratReversal, title = _is122BearishRevStratReversal, style = _stratComboStyle, color = color.new(_bearColor, 0), location = _stratComboLocation, text = _is122BearishRevStratReversal, textcolor = color.new(_bearColor, 0), offset = _stratComboOffset, show_last = 1)
plotshape(is122BullishRevStratReversal, title = _is122BullishRevStratReversal, style = _stratComboStyle, color = color.new(_bullColor, 0), location = _stratComboLocation, text = _is122BullishRevStratReversal, textcolor = color.new(_bullColor, 0), offset = _stratComboOffset, show_last = 1)
plotshape(is2222BearishRandyJackson, title = _is2222BearishRandyJackson, style = _stratComboStyle, color = color.new(_bearColor, 0), location = _stratComboLocation, text = _is2222BearishRandyJackson, textcolor = color.new(_bearColor, 0), offset = _stratComboOffset, show_last = 1)
plotshape(is2222BullishRandyJackson, title = _is2222BullishRandyJackson, style = _stratComboStyle, color = color.new(_bullColor, 0), location = _stratComboLocation, text = _is2222BullishRandyJackson, textcolor = color.new(_bullColor, 0), offset = _stratComboOffset, show_last = 1)
plotshape(isNirvana and not isBigMeech ? true : false , title=_isNirvana, style=_stratComboStyle, color=color.new(_outsideColor,0), location=_stratComboLocation, text=_isNirvana, textcolor=color.new(_outsideColor,0), offset=_stratComboOffset, show_last=1)
plotshape(isHolyGrail, title=_isHolyGrail, style=_stratComboStyle, color=color.new(_outsideColor,0), location=_stratComboLocation, text=_isHolyGrail, textcolor=color.new(_outsideColor,0), offset=_stratComboOffset, show_last=1)
plotshape(isDoubleInside, title=_isDoubleInside, style=_stratComboStyle, color=color.new(_outsideColor,0), location=_stratComboLocation, text=_isDoubleInside, textcolor=color.new(_outsideColor,0), offset=_stratComboOffset, show_last=1)

plotshape(isBigMeech, title=_isBigMeech, style=_stratComboStyle, color=color.new(_outsideColor,0), location=_stratComboLocation, text=_isBigMeech, textcolor=color.new(_outsideColor,0), offset=_stratComboOffset, show_last=1)
// plotshape(is311, title=_is311, style=_stratComboStyle, color=color.new(_outsideColor,0), location=_stratComboLocation, text=_is311, textcolor=color.new(_outsideColor,0), offset=_stratComboOffset, show_last=1)



// plotshape(isSalvana and barstate.isconfirmed, title=_isSalvana, style=_stratComboStyle, color=color.new(_outsideColor,0), location=_stratComboLocation, text=_isSalvana, textcolor=color.new(_outsideColor,0), offset=_stratComboOffset, show_last=1)
// plotshape(isHolySal and barstate.isconfirmed, title=_isHolySal, style=_stratComboStyle, color=color.new(_outsideColor,0), location=_stratComboLocation, text=_isHolySal, textcolor=color.new(_outsideColor,0), offset=_stratComboOffset, show_last=1)

// previous high low lines
if _isPrevDayHighLineActive and (timeframe.isintraday or timeframe.isdaily)
    highDayLine = line.new(x1 = timeDayValue[1], y1 = highDayValue[1], x2 = time, xloc = xloc.bar_time, y2 = highDayValue[1], extend = extend.right, color = _prevDayHighColor, style = line.style_dashed, width = 1)
    line.delete(highDayLine[1])

if _isPrevDayLowLineActive and (timeframe.isintraday or timeframe.isdaily)
    lowDayLine = line.new(x1 = timeDayValue[1], y1 = lowDayValue[1], x2 = time, xloc = xloc.bar_time, y2 = lowDayValue[1], extend = extend.right, color = _prevDayLowColor, style = line.style_dashed, width = 1)
    line.delete(lowDayLine[1])

if _isPrevWeekHighLineActive and (timeframe.isintraday or timeframe.isdaily or timeframe.isweekly)
    highWeekLine = line.new(x1 = timeDayValue[1], y1 = highWeekValue[1], x2 = time, xloc = xloc.bar_time, y2 = highWeekValue[1], extend = extend.right, color = _prevWeekHighColor, style = line.style_dashed, width = 1)
    line.delete(highWeekLine[1])

if _isPrevWeekLowLineActive and (timeframe.isintraday or timeframe.isdaily or timeframe.isweekly)
    lowWeekLine = line.new(x1 = timeDayValue[1], y1 = lowWeekValue[1], x2 = time, xloc = xloc.bar_time, y2 = lowWeekValue[1], extend = extend.right, color = _prevWeekLowColor, style = line.style_dashed, width = 1)
    line.delete(lowWeekLine[1])

// debug label for pricing for now
debugText = 'PrevDay H|L: ' + str.tostring(highDayValue[1], '#.##') + '|' + str.tostring(lowDayValue[1], '#.##') + '\n PrevWeek H|L: ' + str.tostring(highWeekValue[1], '#.##') + '|' + str.tostring(lowWeekValue[1], '#.##')
if _isDebugLabelActive
    debugLabel = label.new(x = bar_index, y = close - close * .003, textalign = text.align_left, text = debugText, yloc = yloc.price, color = color.black, textcolor = color.white, size = size.normal, style = label.style_label_upper_left)
    label.delete(debugLabel[1])


// ================================
// Full Time Frame Continuity Table 
// ================================

// Table Position Selection
tablePositionInput = input.string("Bottom Right", title="Table Position", 
     options=["Top Left", "Top Right", "Bottom Left", "Bottom Right"])

// Table Size Selection
tableSizeInput = input.string("Small", title="Table Size", 
     options=["Small", "Medium", "Large"])

// Function to convert user selection into position enum
getTablePosition(pos) =>
    pos == "Top Left" ? position.top_left : pos == "Top Right" ? position.top_right : pos == "Bottom Left" ? position.bottom_left : position.bottom_right  // Default

// Function to convert size selection into size enum
getTextSize(sizeInput) =>
    sizeInput == "Small" ? size.small : sizeInput == "Large" ? size.large : size.normal  // Default (Medium)

// --- Function to Get Arrow and Background Color ---
getArrowAndBackground(tf) =>
    openPrice = request.security(syminfo.tickerid, tf, open)
    currentPrice = close
    upOrDown = currentPrice > openPrice ? "▲" : "▼"
    bgColor = currentPrice > openPrice ? color.rgb(112, 151, 113) : color.rgb(241, 104, 104, 7)
    [upOrDown, bgColor]

// --- ATR Calculation (Daily Time Frame) ---
atrValue = request.security(syminfo.tickerid, "D", ta.atr(atrLength))

// --- Create Table (User-defined Position) ---
var table ftfcTable = table.new(position=getTablePosition(tablePositionInput), columns=2, rows=11, bgcolor=color.gray)

// Get user-selected text size
txtSize = getTextSize(tableSizeInput)

// --- Fill Table Headers ---

if bar_index == 0
    table.cell(ftfcTable, 0, 0, "ATR (D)", text_color=color.black, bgcolor=color.rgb(200, 200, 200), text_size=txtSize)
    table.cell(ftfcTable, 0, 1, "15m", text_color=color.black, bgcolor=color.rgb(200, 200, 200), text_size=txtSize)
    table.cell(ftfcTable, 0, 2, "30m", text_color=color.black, bgcolor=color.rgb(200, 200, 200), text_size=txtSize)
    table.cell(ftfcTable, 0, 3, "1H", text_color=color.black, bgcolor=color.rgb(200, 200, 200), text_size=txtSize)
    table.cell(ftfcTable, 0, 4, "4H", text_color=color.black, bgcolor=color.rgb(200, 200, 200), text_size=txtSize)
    table.cell(ftfcTable, 0, 5, "D", text_color=color.black, bgcolor=color.rgb(200, 200, 200), text_size=txtSize)
    table.cell(ftfcTable, 0, 6, "2D", text_color=color.black, bgcolor=color.rgb(200, 200, 200), text_size=txtSize) 
    table.cell(ftfcTable, 0, 7, "W", text_color=color.black, bgcolor=color.rgb(200, 200, 200), text_size=txtSize)
    table.cell(ftfcTable, 0, 8, "2W", text_color=color.black, bgcolor=color.rgb(200, 200, 200), text_size=txtSize)
    table.cell(ftfcTable, 0, 9, "M", text_color=color.black, bgcolor=color.rgb(200, 200, 200), text_size=txtSize)
    table.cell(ftfcTable, 0, 10, "2M", text_color=color.black, bgcolor=color.rgb(200, 200, 200), text_size=txtSize)

// --- Fill Table Values if Enabled ---
if showTable
    // ATR Value
    table.cell(ftfcTable, 1, 0, str.tostring(atrValue, "#.##"), text_color=color.black, bgcolor=color.white, text_size=txtSize)

    [arrow15, bg15] = getArrowAndBackground("15")
    table.cell(ftfcTable, 1, 1, arrow15, text_color=color.black, bgcolor=bg15, text_size=txtSize)

    [arrow30, bg30] = getArrowAndBackground("30")
    table.cell(ftfcTable, 1, 2, arrow30, text_color=color.black, bgcolor=bg30, text_size=txtSize)

    [arrow60, bg60] = getArrowAndBackground("60")
    table.cell(ftfcTable, 1, 3, arrow60, text_color=color.black, bgcolor=bg60, text_size=txtSize)

    [arrow240, bg240] = getArrowAndBackground("240")
    table.cell(ftfcTable, 1, 4, arrow240, text_color=color.black, bgcolor=bg240, text_size=txtSize)

    [arrowD, bgD] = getArrowAndBackground("D")
    table.cell(ftfcTable, 1, 5, arrowD, text_color=color.black, bgcolor=bgD, text_size=txtSize)

    [arrow2D, bg2D] = getArrowAndBackground("2D") 
    table.cell(ftfcTable, 1, 6, arrow2D, text_color=color.black, bgcolor=bg2D, text_size=txtSize) 

    [arrowW, bgW] = getArrowAndBackground("W")
    table.cell(ftfcTable, 1, 7, arrowW, text_color=color.black, bgcolor=bgW, text_size=txtSize)

    [arrow2W, bg2W] = getArrowAndBackground("2W")
    table.cell(ftfcTable, 1, 8, arrow2W, text_color=color.black, bgcolor=bg2W, text_size=txtSize)

    [arrowM, bgM] = getArrowAndBackground("M")
    table.cell(ftfcTable, 1, 9, arrowM, text_color=color.black, bgcolor=bgM, text_size=txtSize)

    [arrow2M, bg2M] = getArrowAndBackground("2M") // Fetch 2M timeframe
    table.cell(ftfcTable, 1, 10, arrow2M, text_color=color.black, bgcolor=bg2M, text_size=txtSize)
